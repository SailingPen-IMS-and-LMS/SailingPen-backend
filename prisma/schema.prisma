// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserType {
  admin
  adminassistant
  tutor
  tutorassistant
  student
}

enum ResourceType {
  video
  image
  document
}

model User {
  user_id       String         @id @default(dbgenerated("(concat('user_', gen_random_uuid()))::TEXT"))
  nic           String         @unique
  f_name        String
  l_name        String
  username      String         @unique
  email         String         @unique
  password      String
  dob           DateTime
  address       String
  contact_no    String         @unique
  user_type     UserType       @default(student)
  refresh_token String?
  avatar        String?
  student       Student?
  tutor         Tutor?
  admin         Administrator?
  created_at    DateTime       @default(now())
}

model Administrator {
  admin_id String @id @default(dbgenerated("(concat('admin_', gen_random_uuid()))::TEXT"))
  user     User   @relation(fields: [user_id], references: [user_id])
  user_id  String @unique
}

model Student {
  student_id        String       @id @default(dbgenerated("(concat('student_', gen_random_uuid()))::TEXT"))
  school            String
  parent_contact_no String
  barcode           String?
  user              User         @relation(fields: [user_id], references: [user_id])
  user_id           String       @unique
  Enrollment        Enrollment[]
  Attendance        Attendance[]
}

model Tutor {
  tutor_id        String          @id @default(dbgenerated("(concat('tutor_', gen_random_uuid()))::TEXT"))
  qualifications  String[]
  payment_details Json
  user            User            @relation(fields: [user_id], references: [user_id])
  user_id         String          @unique
  tutionclasses   TutionClass[]
  subject         Subject?        @relation(fields: [subject_id], references: [subject_id])
  subject_id      String?
  library         Library?
  libraryFolders  LibraryFolder[]
}

model SubjectStream {
  subject_stream_id  String    @id @default(dbgenerated("(concat('st_', gen_random_uuid()))::TEXT"))
  stream_name        String    @unique
  stream_description String
  subjects           Subject[]
}

model Subject {
  subject_id          String          @id @default(dbgenerated("(concat('subject_', gen_random_uuid()))::TEXT"))
  subject_name        String          @unique
  subject_description String
  tutionclasses       TutionClass[]
  subject_stream      SubjectStream[]
  tutor               Tutor[]
}

model TutionClass {
  class_id          String       @id @default(dbgenerated("(concat('class_', gen_random_uuid()))::TEXT"))
  class_name        String
  class_description String
  schedule          Json?
  admission_fee     Decimal?
  monthly_fee       Decimal?
  subject           Subject      @relation(fields: [subject_id], references: [subject_id])
  subject_id        String
  tutor             Tutor        @relation(fields: [tutor_id], references: [tutor_id])
  tutor_id          String
  enrollment        Enrollment[]
  attendance        Attendance[]
}

model Enrollment {
  id                 Int         @id @default(autoincrement())
  enrolled_date_time DateTime    @default(now())
  student            Student     @relation(fields: [student_id], references: [student_id])
  student_id         String
  tuition_class      TutionClass @relation(fields: [class_id], references: [class_id])
  class_id           String

  @@unique([class_id, student_id])
}

model Attendance {
  id              Int         @id @default(autoincrement())
  attendance_date DateTime    @default(now())
  student         Student     @relation(fields: [student_id], references: [student_id])
  student_id      String
  tuition_class   TutionClass @relation(fields: [class_id], references: [class_id])
  class_id        String
}

model Library {
  id             Int            @id @default(autoincrement())
  tutor          Tutor          @relation(fields: [tutor_id], references: [tutor_id])
  tutor_id       String         @unique
  rootFolder     LibraryFolder? @relation(fields: [root_folder_id], references: [id])
  root_folder_id Int?           @unique
}

model LibraryFolder {
  id         Int             @id @default(autoincrement())
  name       String
  created_at DateTime        @default(now())
  parent     LibraryFolder?  @relation("ChildFolders", fields: [parentId], references: [id])
  parentId   Int?
  children   LibraryFolder[] @relation("ChildFolders")
  Library    Library?
  tutor      Tutor           @relation(fields: [tutor_id], references: [tutor_id])
  tutor_id   String
  Resource   Resource[]
}

model Resource {
  id            Int           @id @default(autoincrement())
  name          String
  url           String
  thumbnail_url String?
  type          ResourceType
  LibraryFolder LibraryFolder @relation(fields: [folder_id], references: [id])
  folder_id     Int
}

model Example {
  id          Int    @id @default(autoincrement())
  name        String
  description String
}
